{"version":3,"sources":["MakeColumns.js","FIleInput.js","PdfGeneratorInterface.js","CreateForm.js","PageContent.js","Faq.js","App.js","index.js"],"names":["make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","FileInput","props","state","file","data","cols","fileValue","handleFile","bind","handleChange","this","setState","files","target","value","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","getData","readAsArrayBuffer","style","paddingBottom","Typography","variant","component","display","alignItems","className","id","accept","onChange","paddingRight","color","htmlFor","Button","startIcon","Component","PDFGeneratorInterface","tableHeaderArr","tableBodyArr","currentActiveObject","TopHeader","_getJsPdfInstance","jsPDF","downloadTableAsPDF","_makePDF","d","Date","toISOString","insName","_topHeader","_pdf","save","_makeHeaderSection","_makeMetaDataSection","_makeTableDataSection","text","autoTable","startY","headStyles","lineWidth","lineColor","styles","cellWidth","cellPadding","didParseCell","table","section","cell","fillColor","textColor","_currentActiveObject","setFontSize","toDateString","theme","head","_makeHeaderRow","body","_makeBodyRows","fontSize","tableWidth","_tableHeaderArr","reduce","obj","headerName","index","subsetPropNames","Set","_tableBodyArr","map","realObj","clonedRealObj","_pluckSubset","subsetObj","p","CreateForm","open","contentToShowInDialog","numOfGrade","presetForm","handleClickOpen","handleClose","makeForm","singleForm","item","TextField","InputProps","readOnly","inputProps","max","min","width","margin","onSubmitClick","preventDefault","perSectionValue","parseInt","form","label","disabled","required","push","setFormData","forEach","sing","onClick","marginBottom","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","onSubmit","Object","entries","autoFocus","PageContent","tableHeadersArr","tableRowsArr","isBtnDis","payload","instituteName","gradingArray","keys","generatePDF","a","subArr","cgpa","calculateCGPA","marking","replace","percentMark","gradeCalculator","sort","b","position","unshift","splice","PdfGeneratorInterface","refresh","fileInputRef","checked","console","log","length","setName","singleGrade","passStatus","parseFloat","toFixed","ref","r","FormGroup","row","FormControlLabel","control","Checkbox","Faq","App","content","setContent","AppBar","elevation","Toolbar","justifyContent","cursor","marginTop","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.449ce27f.chunk.js","sourcesContent":["import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\r\n\treturn o;\r\n};","import React, { Component } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumns';\r\nimport { Typography, Button } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nclass FileInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        }\r\n        this.handleFile = this.handleFile.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    refresh() {\r\n        this.setState({\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        })\r\n    }\r\n\r\n    handleChange(e) {\r\n        const files = e.target.files;\r\n        if (files && files[0]) this.setState({ file: files[0], fileValue: e.target.value },()=>{\r\n            this.handleFile()\r\n        });\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n\r\n        reader.onload = (e) => {\r\n            /* Parse data */\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            /* Update state */\r\n            this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n                this.props.getData(this.state.data)\r\n            });\r\n\r\n        };\r\n\r\n        if (rABS) {\r\n            reader.readAsBinaryString(this.state.file);\r\n        } else {\r\n            reader.readAsArrayBuffer(this.state.file);\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ paddingBottom:\"16px\" }} >\r\n                <Typography variant=\"h3\" component=\"h2\">\r\n                    Upload an excel to Process Triggers\r\n                </Typography>\r\n                <br />\r\n\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                        style={{ display: 'none' }}\r\n                        type=\"file\"\r\n                        value={this.state.fileValue}\r\n                        className=\"form-control\"\r\n                        id=\"file\"\r\n                        accept={\".xls,.xlsx\"}\r\n                        onChange={this.handleChange} />\r\n                    <Typography style={{ paddingRight: \"16px\" }} variant=\"body1\" color=\"initial\">Upload File to calculate grade</Typography>\r\n                    <label htmlFor={\"file\"} >\r\n                        <Button variant=\"contained\" color=\"default\" component=\"span\" startIcon={<CloudUploadIcon />}>Upload</Button>\r\n                    </label>\r\n                </div>\r\n                {this.state.file.name && (\r\n                    <>\r\n                        <Typography style={{ paddingRight: \"8px\" }} variant=\"body2\" color=\"initial\">{this.state.file.name}</Typography>\r\n                        {/* <Button  onClick={this.handleFile} variant=\"contained\" color=\"default\" component=\"span\" >Submit</Button> */}\r\n                    </>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileInput;","import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nclass PDFGeneratorInterface {\r\n    constructor(tableHeaderArr, tableBodyArr,currentActiveObject,TopHeader) {\r\n         this._pdf = this._getJsPdfInstance ()\r\n         this._tableHeaderArr = tableHeaderArr\r\n         this._tableBodyArr = tableBodyArr\r\n         this._currentActiveObject = currentActiveObject\r\n         this._topHeader = TopHeader\r\n    }\r\n\r\n    _getJsPdfInstance = () => {\r\n        return new jsPDF();\r\n    }\r\n\r\n    downloadTableAsPDF = () => {\r\n        this._makePDF()\r\n        let d= new Date().toISOString()\r\n        let insName = this._topHeader !== \"\" ? this._topHeader : \"Institute\" \r\n        this._pdf.save(`${insName}_result_${d}.pdf`);\r\n    }\r\n\r\n    _makePDF = () => {\r\n        this._makeHeaderSection()\r\n        this._makeMetaDataSection()\r\n        this._makeTableDataSection()\r\n    }\r\n\r\n    _makeHeaderSection = () => {\r\n        this._pdf.text(this._topHeader, 100, 10, \"center\");\r\n        // this._pdf.addImage(base64Img, \"jpg\", 73, 5, 8, 8);\r\n    }\r\n\r\n    _makeMetaDataSection = () => {\r\n        this._pdf.autoTable({\r\n            startY: 23,\r\n            // theme: \"\",\r\n            //html: '#printable',\r\n            //head: headRows(),\r\n            // body: [\r\n            //   [\"Name :\", \"Mr.X\"],\r\n            //   [\"Email :\", \"valid@gmail.com\"],\r\n            //   [\"Generate Date :\", \"12-10-3019\"]\r\n            // ],\r\n            headStyles: {\r\n              lineWidth: 0.1,\r\n              lineColor: [0, 0, 0]\r\n            },\r\n            styles: {\r\n              cellWidth: 35,\r\n              cellPadding: 0.7\r\n              //rowHeight :0\r\n            },\r\n            didParseCell: function(table) {\r\n              if (table.section === \"head\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n              if (table.section === \"body\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n            }\r\n        });\r\n    }\r\n\r\n    _makeTableDataSection = () => {\r\n        this._pdf.text(this._currentActiveObject, 100, 55, \"center\");\r\n        this._pdf.setFontSize(10)\r\n        this._pdf.text(new Date().toDateString(), 15, 20);\r\n\r\n        this._pdf.autoTable({\r\n          startY: 60,\r\n          // margin: {top: 10},\r\n          theme: \"grid\",\r\n          //html: '#printable',\r\n          head: this._makeHeaderRow(),\r\n          body: this._makeBodyRows(),\r\n          headStyles: {\r\n            lineWidth: 0.1,\r\n            lineColor: [0, 0, 0]\r\n          },\r\n          styles: {\r\n            cellPadding: 0.5,\r\n            fontSize : 9,\r\n            tableWidth: 'wrap',\r\n          },\r\n          didParseCell: function(table) {\r\n            if (table.section === \"head\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n            if (table.section === \"body\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    _makeHeaderRow = () => {\r\n        let headersObj = this._tableHeaderArr.reduce((obj,headerName,index)=>{\r\n            obj[headerName] = headerName\r\n            return obj\r\n        },{})\r\n        return [headersObj];\r\n    }\r\n\r\n    _makeBodyRows = () => {\r\n        let subsetPropNames = new Set(this._tableHeaderArr)\r\n        let body = this._tableBodyArr.map(realObj=>{\r\n            let clonedRealObj = {...realObj}\r\n            let subsetObj = this._pluckSubset(clonedRealObj,subsetPropNames)\r\n            return subsetObj\r\n        })\r\n        return body;\r\n    }\r\n\r\n    _pluckSubset = (clonedRealObj, subsetPropNames) => {\r\n        let subsetObj = {}\r\n        for(let p of subsetPropNames) {\r\n            subsetObj[p] = clonedRealObj[p]\r\n        }\r\n        return subsetObj\r\n    }\r\n}\r\n\r\nexport default PDFGeneratorInterface;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n// import DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\r\n// import { useTheme } from '@material-ui/core/styles';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\n\r\nclass CreateForm extends Component {\r\n    state = {\r\n        open: false,\r\n        contentToShowInDialog: \"constraintsPage\",\r\n        numOfGrade: 1,\r\n        presetForm: []\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false,\r\n            contentToShowInDialog: \"constraintsPage\",\r\n            numOfGrade: 1,\r\n            presetForm: []\r\n        });\r\n    };\r\n\r\n    makeForm = (singleForm) => {\r\n        return singleForm.value.map((item, i) => {\r\n            return (\r\n                <TextField\r\n                    key={i}\r\n                    id={singleForm.id}\r\n                    InputProps={{\r\n                        readOnly: item.readOnly,\r\n                        inputProps: { max: 100, min: 10 }\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    {...item}\r\n                    style={{ width: \"100px\", margin: \"10px\" }}\r\n                ></TextField>\r\n            )\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ numOfGrade: e.target.value })\r\n    }\r\n\r\n    onSubmitClick = (e) => {\r\n        e.preventDefault()\r\n        const { contentToShowInDialog, numOfGrade } = this.state\r\n\r\n        if (contentToShowInDialog === \"constraintsPage\") {\r\n            let perSectionValue = parseInt(100 / numOfGrade)\r\n            let form = [];\r\n            for (let i = 0; i < numOfGrade; i++) {\r\n                let obj = {}\r\n                obj.id = i;\r\n                obj.value = [\r\n                    { label: \"Start\", type: \"number\", name: 'start', disabled: true, onChange: this.onChange, value: (perSectionValue * i) + 1, required: true },\r\n                    { label: \"End\", type: \"number\", name: 'end', onChange: this.onChange, value: i === numOfGrade - 1 ? 100 : perSectionValue * (i + 1), disabled: i === numOfGrade - 1 ? true : false, required: true },\r\n                    { label: \"Grade\", type: \"text\", name: 'grade', onChange: this.onChange, value: \"\", required: true },\r\n                    { label: \"GPA\", type: \"text\", name: 'gpa', onChange: this.onChange, value: \"\", required: true }\r\n                ]\r\n                form.push(obj)\r\n            }\r\n            this.setState({\r\n                contentToShowInDialog: \"inputField\",\r\n                presetForm: form\r\n            })\r\n        } else if (contentToShowInDialog === \"inputField\") {\r\n            this.props.setFormData(this.state.presetForm)\r\n            this.setState({\r\n                contentToShowInDialog: \"resp\",\r\n            })\r\n        }else if (contentToShowInDialog === \"resp\"){\r\n            this.setState({\r\n                open: false,\r\n                contentToShowInDialog: \"constraintsPage\",\r\n                numOfGrade: 1,\r\n                presetForm: []\r\n            })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        let form = [...this.state.presetForm]\r\n        form.forEach((item, i) => {\r\n            if (item.id == e.target.id) {\r\n                item.value.forEach((sing, index) => {\r\n                    if (sing.name === e.target.name) {\r\n                        if (e.target.name === \"end\") {\r\n                            sing.value = e.target.value\r\n                            form[i + 1].value[0].value = parseInt(e.target.value) + 1\r\n                        } else\r\n                            sing.value = e.target.value\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            presetForm: form\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { open, contentToShowInDialog, numOfGrade, presetForm } = this.state\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen} style={{ marginBottom: \"20px\" }}>\r\n                    Create custom Grade\r\n                </Button>\r\n\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"responsive-dialog-title\"\r\n                >\r\n                    <DialogTitle>{\"Make custom grade\"}</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <form onSubmit={this.onSubmitClick}>\r\n\r\n                            {contentToShowInDialog === \"constraintsPage\" && (\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    label=\"Set Number of grade\"\r\n                                    type=\"number\"\r\n                                    onChange={this.handleChange}\r\n                                    InputProps={{\r\n                                        inputProps: { max: 10, min: 1 }\r\n                                    }}\r\n                                    style={{ width: \"300px\", margin: \"10px\" }}\r\n                                    value={numOfGrade}\r\n                                ></TextField>\r\n                            )}\r\n\r\n                            {contentToShowInDialog === \"inputField\" && (\r\n                                Object.entries(presetForm).map(([key, value], i) => {\r\n                                    return (<div key={i}>{this.makeForm(value)}</div>)\r\n                                })\r\n                            )}\r\n                            {contentToShowInDialog === \"resp\" && (\r\n                                <div>\r\n                                    Your custom grade was submitted. Please click the Download Result button to download the result\r\n                                </div>)\r\n                            }\r\n                            <Button autoFocus onClick={this.handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type=\"submit\" color=\"primary\" autoFocus>\r\n                                Submit\r\n                            </Button>\r\n                        </form>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateForm;","import React, { Component } from 'react';\r\nimport FileInput from './FIleInput';\r\nimport PdfGeneratorInterface from \"./PdfGeneratorInterface\";\r\nimport { Button, TextField, Typography, AppBar, Toolbar } from '@material-ui/core';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CreateForm from './CreateForm';\r\n\r\nclass PageContent extends Component {\r\n    state = {\r\n        tableHeadersArr: [],\r\n        tableRowsArr: [],\r\n        isBtnDis: true,\r\n        payload: {},\r\n        instituteName: \"\",\r\n        gradingArray: [\r\n            [33, \"F\", \"0.00\"],\r\n            [40, \"D\", \"1.00\"],\r\n            [50, \"C\", \"2.00\"],\r\n            [60, \"B\", \"3.00\"],\r\n            [70, \"A-\", \"3.50\"],\r\n            [80, \"A\", \"4.00\"],\r\n            [100, \"A+\", \"5.00\"],\r\n        ]\r\n    }\r\n\r\n    getData = (data) => {\r\n        this.setState({\r\n            tableHeadersArr: Object.keys(data[0]),\r\n            tableRowsArr: data,\r\n        })\r\n    }\r\n\r\n    gradeCalculator(data) {\r\n        for (let index = 0; index < this.state.gradingArray.length; index++) {\r\n            const item = this.state.gradingArray[index];\r\n            if (data <= item[0]) {\r\n                data = `${item[1]} | ${item[2]}`;\r\n                break;\r\n            }\r\n        }\r\n        return data\r\n    }\r\n\r\n    calculateCGPA(item) {\r\n        let subArr = Object.keys(this.state.payload);\r\n        let cgpa = 0\r\n        let passStatus = 1\r\n        for (let index = 0; index < subArr.length; index++) {\r\n            const data = subArr[index];\r\n            let marking = parseInt(data.replace(/[^\\d]/g, ''), 10) || 100\r\n            let percentMark = (item[data] * 100) / marking\r\n\r\n            for (let index = 0; index < this.state.gradingArray.length; index++) {\r\n                const item = this.state.gradingArray[index];\r\n                if (percentMark <= item[0]) {\r\n                    if (parseFloat(item[2]) === 0.00) {\r\n                        passStatus = 0\r\n                    }\r\n                    cgpa += parseFloat(item[2])\r\n                    break;\r\n                }\r\n            }\r\n            if (passStatus === 0) {\r\n                cgpa = 0.00;\r\n                break;\r\n            }\r\n        }\r\n        return (cgpa / (subArr.length)).toFixed(2)\r\n    }\r\n\r\n    generatePDF = async () => {\r\n        let tableRowsArr = [...this.state.tableRowsArr];\r\n        // calculate grade\r\n        let subArr = Object.keys(this.state.payload);\r\n\r\n        tableRowsArr.forEach((item, index) => {\r\n            item.cgpa = this.calculateCGPA(item)\r\n            subArr.forEach((data) => {\r\n                let marking = parseInt(data.replace(/[^\\d]/g, ''), 10) || 100\r\n                let percentMark = (item[data] * 100) / marking\r\n                item[data] = item[data] + \" | \" + this.gradeCalculator(percentMark)\r\n            })\r\n        })\r\n\r\n        tableRowsArr.sort(function (a, b) { return b.cgpa - a.cgpa });\r\n\r\n        tableRowsArr.forEach((item, index) => {\r\n            item.position = index + 1\r\n        })\r\n\r\n        let tableHeadersArr = Object.keys(tableRowsArr[0])\r\n        tableHeadersArr.unshift(\"cgpa\")\r\n        tableHeadersArr.unshift(\"position\")\r\n        tableHeadersArr.splice(-2)\r\n        let pdfInterface = new PdfGeneratorInterface(\r\n            tableHeadersArr,\r\n            tableRowsArr,\r\n            \"Result\",\r\n            this.state.instituteName\r\n        );\r\n        pdfInterface.downloadTableAsPDF()\r\n\r\n        this.refresh()\r\n    };\r\n\r\n    refresh = () => {\r\n        this.setState({\r\n            tableHeadersArr: [],\r\n            tableRowsArr: [],\r\n            payload: {},\r\n            isBtnDis: true\r\n        }, () => {\r\n            this.fileInputRef.refresh()\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let payload = { ...this.state.payload }\r\n        if (e.target.checked)\r\n            payload[e.target.name] = e.target.checked\r\n        else {\r\n            delete payload[e.target.name]\r\n        }\r\n        console.log(payload)\r\n        let isBtnDis = true\r\n        if (Object.keys(payload).length !== 0) {\r\n            isBtnDis = false\r\n        }\r\n        this.setState({\r\n            payload,\r\n            isBtnDis\r\n        })\r\n    }\r\n\r\n    setName = (e) => {\r\n        this.setState({\r\n            instituteName: e.target.value\r\n        })\r\n    }\r\n\r\n    setFormData = (data) => {\r\n        console.log(data)\r\n        let gradingArray = []\r\n        data.forEach((item, i) => {\r\n            let singleGrade = [item.value[1].value, item.value[2].value, item.value[3].value]\r\n            gradingArray.push(singleGrade)\r\n        })\r\n        console.log(gradingArray)\r\n        this.setState({\r\n            gradingArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FileInput getData={this.getData} ref={(r) => { this.fileInputRef = r }} />\r\n\r\n                {this.state.tableHeadersArr.length > 0 && (\r\n                    <div>\r\n\r\n                        <Typography variant=\"h6\" component=\"h2\">\r\n                            Choose columns which you want for calculate grade:\r\n                        </Typography>\r\n\r\n                        < TextField\r\n                            onChange={this.setName}\r\n                            label={\"Enter Institute Name\"}\r\n                            value={this.state.instituteName}\r\n                            required variant=\"outlined\"\r\n                            style={{ margin: \"20px 0px\" }}\r\n                        />\r\n\r\n                        <FormGroup row>\r\n                            {this.state.tableHeadersArr.map((item, i) => {\r\n                                return (\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={this.state.payload.item} onChange={this.handleChange} name={item} />}\r\n                                        label={item}\r\n                                        key={i}\r\n                                    />\r\n                                )\r\n                            })}\r\n\r\n                        </FormGroup>\r\n\r\n                        <CreateForm setFormData={this.setFormData} />\r\n                    </div>\r\n                )}\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={this.state.isBtnDis}\r\n                    onClick={this.generatePDF}\r\n                >\r\n                    Download Result\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PageContent;","import React, { Component } from 'react';\r\n\r\nclass Faq extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                FAQ Page \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Faq;","import React, { Component } from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport PageContent from './PageContent';\nimport Faq from './Faq';\n\n\nclass App extends Component {\n  state = {\n    content: \"home\"\n  }\n  setContent = (content) => {\n    this.setState({\n      content\n    })\n  }\n  render() {\n    return (\n      <div >\n        <AppBar position=\"fixed\" color=\"primary\" elevation={2} >\n          <Toolbar style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <div> App Name</div>\n            <div>\n              <span style={{ paddingRight: \"20px\", cursor: \"pointer\" }} onClick={() => { this.setContent(\"home\") }}> Home</span>\n              <span style={{ cursor: \"pointer\" }} onClick={() => { this.setContent(\"faq\") }}> Faq</span>\n            </div>\n          </Toolbar>\n        </AppBar>\n        <div style={{ marginTop: \"70px\", padding: \"20px\" }}>\n          {this.state.content === \"home\" && (\n            <PageContent />\n          )}\n          {this.state.content === \"faq\" && (\n            <Faq />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}