{"version":3,"sources":["MakeColumns.js","FIleInput.js","PdfGeneratorInterface.js","App.js","index.js"],"names":["make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","FileInput","props","state","file","data","cols","fileValue","handleFile","bind","handleChange","this","setState","files","target","value","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","getData","readAsArrayBuffer","htmlFor","className","id","accept","onChange","onClick","Component","PDFGeneratorInterface","tableHeaderArr","tableBodyArr","currentActiveObject","_getJsPdfInstance","jsPDF","downloadTableAsPDF","_makePDF","_pdf","save","_makeHeaderSection","_makeMetaDataSection","_makeTableDataSection","text","autoTable","startY","headStyles","lineWidth","lineColor","styles","cellWidth","cellPadding","didParseCell","table","section","cell","fillColor","textColor","_currentActiveObject","theme","head","_makeHeaderRow","body","_makeBodyRows","fontSize","tableWidth","_tableHeaderArr","reduce","obj","headerName","index","subsetPropNames","Set","_tableBodyArr","map","realObj","clonedRealObj","_pluckSubset","subsetObj","p","App","tableHeadersArr","tableRowsArr","isBtnDis","payload","Object","keys","generatePDF","a","forEach","item","subArr","cgpa","calculateCGPA","gradeCalculator","sort","b","position","unshift","splice","PdfGeneratorInterface","refresh","fileInputRef","checked","length","toFixed","style","display","alignItems","justifyContent","background","minHeight","flexDirection","padding","ref","r","FormGroup","row","FormControlLabel","control","Checkbox","label","Button","variant","color","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83f74ae1.chunk.js","sourcesContent":["import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\r\n\treturn o;\r\n};","import React, { Component } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumns';\r\n\r\n\r\nclass FileInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        }\r\n        this.handleFile = this.handleFile.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    refresh() {\r\n        this.setState({\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        })\r\n    }\r\n\r\n    handleChange(e) {\r\n        const files = e.target.files;\r\n        if (files && files[0]) this.setState({ file: files[0], fileValue: e.target.value });\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n\r\n        reader.onload = (e) => {\r\n            /* Parse data */\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            /* Update state */\r\n            this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n                this.props.getData(this.state.data)\r\n            });\r\n\r\n        };\r\n\r\n        if (rABS) {\r\n            reader.readAsBinaryString(this.state.file);\r\n        } else {\r\n            reader.readAsArrayBuffer(this.state.file);\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"file\">Upload an excel to Process Triggers</label>\r\n                <br />\r\n                <input type=\"file\" value={this.state.fileValue} className=\"form-control\" id=\"file\" accept={\".xls,.xlsx\"} onChange={this.handleChange} />\r\n                <br />\r\n                <input type='submit'\r\n                    value=\"Submit File\"\r\n                    onClick={this.handleFile} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileInput;","import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nclass PDFGeneratorInterface {\r\n    constructor(tableHeaderArr, tableBodyArr,currentActiveObject) {\r\n         this._pdf = this._getJsPdfInstance ()\r\n         this._tableHeaderArr = tableHeaderArr\r\n         this._tableBodyArr = tableBodyArr\r\n         this._currentActiveObject = currentActiveObject\r\n    }\r\n\r\n    _getJsPdfInstance = () => {\r\n        return new jsPDF();\r\n    }\r\n\r\n    downloadTableAsPDF = () => {\r\n        this._makePDF()\r\n        this._pdf.save(\"a4.pdf\");\r\n    }\r\n\r\n    _makePDF = () => {\r\n        this._makeHeaderSection()\r\n        this._makeMetaDataSection()\r\n        this._makeTableDataSection()\r\n    }\r\n\r\n    _makeHeaderSection = () => {\r\n        this._pdf.text(\"Pathshala\", 100, 10, \"center\");\r\n        // this._pdf.addImage(base64Img, \"jpg\", 73, 5, 8, 8);\r\n    }\r\n\r\n    _makeMetaDataSection = () => {\r\n        this._pdf.autoTable({\r\n            startY: 23,\r\n            // theme: \"\",\r\n            //html: '#printable',\r\n            //head: headRows(),\r\n            // body: [\r\n            //   [\"Name :\", \"Mr.X\"],\r\n            //   [\"Email :\", \"valid@gmail.com\"],\r\n            //   [\"Generate Date :\", \"12-10-3019\"]\r\n            // ],\r\n            headStyles: {\r\n              lineWidth: 0.1,\r\n              lineColor: [0, 0, 0]\r\n            },\r\n            styles: {\r\n              cellWidth: 35,\r\n              cellPadding: 0.7\r\n              //rowHeight :0\r\n            },\r\n            didParseCell: function(table) {\r\n              if (table.section === \"head\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n              if (table.section === \"body\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n            }\r\n        });\r\n    }\r\n\r\n    _makeTableDataSection = () => {\r\n        this._pdf.text(this._currentActiveObject, 100, 55, \"center\");\r\n        this._pdf.autoTable({\r\n          startY: 60,\r\n          // margin: {top: 10},\r\n          theme: \"grid\",\r\n          //html: '#printable',\r\n          head: this._makeHeaderRow(),\r\n          body: this._makeBodyRows(),\r\n          headStyles: {\r\n            lineWidth: 0.1,\r\n            lineColor: [0, 0, 0]\r\n          },\r\n          styles: {\r\n            cellPadding: 0.5,\r\n            fontSize : 9,\r\n            tableWidth: 'wrap',\r\n          },\r\n          didParseCell: function(table) {\r\n            if (table.section === \"head\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n            if (table.section === \"body\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    _makeHeaderRow = () => {\r\n        let headersObj = this._tableHeaderArr.reduce((obj,headerName,index)=>{\r\n            obj[headerName] = headerName\r\n            return obj\r\n        },{})\r\n        return [headersObj];\r\n    }\r\n\r\n    _makeBodyRows = () => {\r\n        let subsetPropNames = new Set(this._tableHeaderArr)\r\n        let body = this._tableBodyArr.map(realObj=>{\r\n            let clonedRealObj = {...realObj}\r\n            let subsetObj = this._pluckSubset(clonedRealObj,subsetPropNames)\r\n            return subsetObj\r\n        })\r\n        return body;\r\n    }\r\n\r\n    _pluckSubset = (clonedRealObj, subsetPropNames) => {\r\n        let subsetObj = {}\r\n        for(let p of subsetPropNames) {\r\n            subsetObj[p] = clonedRealObj[p]\r\n        }\r\n        return subsetObj\r\n    }\r\n}\r\n\r\nexport default PDFGeneratorInterface;","import React, { Component } from 'react';\nimport FileInput from './FIleInput';\nimport PdfGeneratorInterface from \"./PdfGeneratorInterface\";\nimport { Button } from '@material-ui/core';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nclass App extends Component {\n\n  state = {\n    tableHeadersArr: [],\n    tableRowsArr: [],\n    isBtnDis: true,\n    payload: {}\n  }\n\n  getData = (data) => {\n    this.setState({\n      tableHeadersArr: Object.keys(data[0]),\n      tableRowsArr: data,\n    })\n  }\n\n  gradeCalculator(data) {\n    switch (true) {\n      case (data < 33):\n        data = `${data} | 0.00 | fail`\n        break;\n      case (data < 40):\n        data = `${data} | 1.00 | D`\n        break;\n      case (data < 50):\n        data = `${data} | 2.00 | C`\n        break;\n      case (data < 60):\n        data = `${data} | 3.00 | B`\n        break;\n      case (data < 70):\n        data = `${data} | 3.50 | A-`\n        break;\n      case (data < 80):\n        data = `${data} | 4.00 | A`\n        break;\n      default:\n        data = `${data} | 5.00 | A+`\n        break;\n    }\n    return data\n  }\n\n  calculateCGPA(item) {\n    let subArr = Object.keys(this.state.payload);\n    let cgpa = 0\n    for (let index = 0; index < subArr.length; index++) {\n      const data = subArr[index];\n      if (item[data] < 33) {\n        cgpa = 0;\n        break\n      } else if (item[data] < 40)\n        cgpa += 1.00\n      else if (item[data] < 50)\n        cgpa += 2.00\n      else if (item[data] < 60)\n        cgpa += 3.00\n      else if (item[data] < 70)\n        cgpa += 3.50\n      else if (item[data] < 80)\n        cgpa += 4.00\n      else\n        cgpa += 5.00\n    }\n    return (cgpa / (subArr.length)).toFixed(2)\n  }\n\n  generatePDF = async () => {\n    let tableRowsArr = [...this.state.tableRowsArr];\n    // calculate grade\n    tableRowsArr.forEach((item, index) => {\n      let subArr = Object.keys(this.state.payload);\n      item.cgpa = this.calculateCGPA(item)\n      subArr.forEach((data) => {\n        item[data] = this.gradeCalculator(item[data])\n      })\n    })\n\n    tableRowsArr.sort(function (a, b) { return b.cgpa - a.cgpa });\n\n    tableRowsArr.forEach((item, index) => {\n      item.position = index + 1\n    })\n\n    let tableHeadersArr =  Object.keys(tableRowsArr[0])\n    tableHeadersArr.unshift(\"cgpa\")\n    tableHeadersArr.unshift(\"position\")\n    tableHeadersArr.splice(-2)\n    let pdfInterface = new PdfGeneratorInterface(\n      tableHeadersArr,\n      tableRowsArr,\n      \"Result\"\n    );\n    pdfInterface.downloadTableAsPDF()\n\n    this.refresh()\n  };\n\n  refresh = () => {\n    this.setState({\n      tableHeadersArr: [],\n      tableRowsArr: [],\n      payload: {},\n      isBtnDis: true\n    }, () => {\n      this.fileInputRef.refresh()\n    })\n  }\n  handleChange = (e) => {\n    let payload = { ...this.state.payload }\n    if (e.target.checked)\n      payload[e.target.name] = e.target.checked\n    else {\n      delete payload[e.target.name]\n    }\n    this.setState({\n      payload,\n      isBtnDis: false\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"#ededed\", minHeight: \"100vh\", flexDirection: \"column\" }}>\n        <div style={{ padding: \"20px\" }}>\n          <FileInput getData={this.getData} ref={(r) => { this.fileInputRef = r }} />\n        </div>\n\n        {this.state.tableHeadersArr.length > 0 && (\n          <div>\n            <div>\n              Choose columns which you want for calculate grade:\n            </div>\n            <FormGroup row>\n              {this.state.tableHeadersArr.map((item, i) => {\n                return (\n                  <FormControlLabel\n                    control={<Checkbox checked={this.state.payload.item} onChange={this.handleChange} name={item} />}\n                    label={item}\n                    key={i}\n                  />\n                )\n              })}\n\n            </FormGroup>\n          </div>\n        )}\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={this.state.isBtnDis}\n          onClick={this.generatePDF}\n        >\n          Download Result\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}