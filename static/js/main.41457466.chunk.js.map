{"version":3,"sources":["MakeColumns.js","FIleInput.js","PdfGeneratorInterface.js","CustomGradeInputForm.js","App.js","index.js"],"names":["make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","FileInput","props","state","file","data","cols","fileValue","handleFile","bind","handleChange","this","setState","files","target","value","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","getData","readAsArrayBuffer","Typography","variant","component","className","id","accept","onChange","onClick","Component","PDFGeneratorInterface","tableHeaderArr","tableBodyArr","currentActiveObject","TopHeader","_getJsPdfInstance","jsPDF","downloadTableAsPDF","_makePDF","_pdf","save","_makeHeaderSection","_makeMetaDataSection","_makeTableDataSection","text","_topHeader","autoTable","startY","headStyles","lineWidth","lineColor","styles","cellWidth","cellPadding","didParseCell","table","section","cell","fillColor","textColor","_currentActiveObject","setFontSize","Date","toDateString","theme","head","_makeHeaderRow","body","_makeBodyRows","fontSize","tableWidth","_tableHeaderArr","reduce","obj","headerName","index","subsetPropNames","Set","_tableBodyArr","map","realObj","clonedRealObj","_pluckSubset","subsetObj","p","ResponsiveDialog","React","useState","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","form","presetForm","forEach","item","sing","setForm","preSet","label","readOnly","addForm","length","handleClose","Button","color","style","marginBottom","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Object","entries","singleForm","TextField","InputProps","inputProps","max","min","width","margin","IconButton","aria-label","push","DialogActions","autoFocus","App","tableHeadersArr","tableRowsArr","isBtnDis","payload","instituteName","keys","generatePDF","a","subArr","cgpa","calculateCGPA","marking","parseInt","replace","percentMark","gradeCalculator","sort","b","position","unshift","splice","PdfGeneratorInterface","refresh","fileInputRef","checked","setName","toFixed","display","alignItems","justifyContent","background","minHeight","flexDirection","padding","ref","r","required","FormGroup","row","FormControlLabel","control","Checkbox","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41457466.chunk.js","sourcesContent":["import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\r\n\treturn o;\r\n};","import React, { Component } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumns';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nclass FileInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        }\r\n        this.handleFile = this.handleFile.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    refresh() {\r\n        this.setState({\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileValue: \"\"\r\n        })\r\n    }\r\n\r\n    handleChange(e) {\r\n        const files = e.target.files;\r\n        if (files && files[0]) this.setState({ file: files[0], fileValue: e.target.value });\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n\r\n        reader.onload = (e) => {\r\n            /* Parse data */\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            /* Update state */\r\n            this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n                this.props.getData(this.state.data)\r\n            });\r\n\r\n        };\r\n\r\n        if (rABS) {\r\n            reader.readAsBinaryString(this.state.file);\r\n        } else {\r\n            reader.readAsArrayBuffer(this.state.file);\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Typography variant=\"h3\" component=\"h2\">\r\n                    Upload an excel to Process Triggers\r\n                </Typography>\r\n                <br />\r\n                <input type=\"file\" value={this.state.fileValue} className=\"form-control\" id=\"file\" accept={\".xls,.xlsx\"} onChange={this.handleChange} />\r\n                <br />\r\n                <input type='submit'\r\n                    value=\"Submit File\"\r\n                    onClick={this.handleFile} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileInput;","import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nclass PDFGeneratorInterface {\r\n    constructor(tableHeaderArr, tableBodyArr,currentActiveObject,TopHeader) {\r\n         this._pdf = this._getJsPdfInstance ()\r\n         this._tableHeaderArr = tableHeaderArr\r\n         this._tableBodyArr = tableBodyArr\r\n         this._currentActiveObject = currentActiveObject\r\n         this._topHeader = TopHeader\r\n    }\r\n\r\n    _getJsPdfInstance = () => {\r\n        return new jsPDF();\r\n    }\r\n\r\n    downloadTableAsPDF = () => {\r\n        this._makePDF()\r\n        this._pdf.save(\"a4.pdf\");\r\n    }\r\n\r\n    _makePDF = () => {\r\n        this._makeHeaderSection()\r\n        this._makeMetaDataSection()\r\n        this._makeTableDataSection()\r\n    }\r\n\r\n    _makeHeaderSection = () => {\r\n        this._pdf.text(this._topHeader, 100, 10, \"center\");\r\n        // this._pdf.addImage(base64Img, \"jpg\", 73, 5, 8, 8);\r\n    }\r\n\r\n    _makeMetaDataSection = () => {\r\n        this._pdf.autoTable({\r\n            startY: 23,\r\n            // theme: \"\",\r\n            //html: '#printable',\r\n            //head: headRows(),\r\n            // body: [\r\n            //   [\"Name :\", \"Mr.X\"],\r\n            //   [\"Email :\", \"valid@gmail.com\"],\r\n            //   [\"Generate Date :\", \"12-10-3019\"]\r\n            // ],\r\n            headStyles: {\r\n              lineWidth: 0.1,\r\n              lineColor: [0, 0, 0]\r\n            },\r\n            styles: {\r\n              cellWidth: 35,\r\n              cellPadding: 0.7\r\n              //rowHeight :0\r\n            },\r\n            didParseCell: function(table) {\r\n              if (table.section === \"head\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n              if (table.section === \"body\") {\r\n                table.cell.styles.fillColor = \"white\";\r\n                table.cell.styles.textColor = \"black\";\r\n                table.cell.styles.lineColor = \"black\";\r\n              }\r\n            }\r\n        });\r\n    }\r\n\r\n    _makeTableDataSection = () => {\r\n        this._pdf.text(this._currentActiveObject, 100, 55, \"center\");\r\n        this._pdf.setFontSize(10)\r\n        this._pdf.text(new Date().toDateString(), 15, 20);\r\n\r\n        this._pdf.autoTable({\r\n          startY: 60,\r\n          // margin: {top: 10},\r\n          theme: \"grid\",\r\n          //html: '#printable',\r\n          head: this._makeHeaderRow(),\r\n          body: this._makeBodyRows(),\r\n          headStyles: {\r\n            lineWidth: 0.1,\r\n            lineColor: [0, 0, 0]\r\n          },\r\n          styles: {\r\n            cellPadding: 0.5,\r\n            fontSize : 9,\r\n            tableWidth: 'wrap',\r\n          },\r\n          didParseCell: function(table) {\r\n            if (table.section === \"head\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n            if (table.section === \"body\") {\r\n              table.cell.styles.fillColor = \"white\";\r\n              table.cell.styles.textColor = \"black\";\r\n              table.cell.styles.lineColor = \"black\";\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    _makeHeaderRow = () => {\r\n        let headersObj = this._tableHeaderArr.reduce((obj,headerName,index)=>{\r\n            obj[headerName] = headerName\r\n            return obj\r\n        },{})\r\n        return [headersObj];\r\n    }\r\n\r\n    _makeBodyRows = () => {\r\n        let subsetPropNames = new Set(this._tableHeaderArr)\r\n        let body = this._tableBodyArr.map(realObj=>{\r\n            let clonedRealObj = {...realObj}\r\n            let subsetObj = this._pluckSubset(clonedRealObj,subsetPropNames)\r\n            return subsetObj\r\n        })\r\n        return body;\r\n    }\r\n\r\n    _pluckSubset = (clonedRealObj, subsetPropNames) => {\r\n        let subsetObj = {}\r\n        for(let p of subsetPropNames) {\r\n            subsetObj[p] = clonedRealObj[p]\r\n        }\r\n        return subsetObj\r\n    }\r\n}\r\n\r\nexport default PDFGeneratorInterface;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TextField, IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default function ResponsiveDialog() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [showAddForm, setAddFormState] = React.useState(false);\r\n\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const onChange = (e) => {\r\n        // console.log(e.target.id,e.target.name,e.target.value)\r\n        let form = [...presetForm]\r\n        form.forEach((item,i)=>{\r\n            if(item.id == e.target.id){\r\n                item.value.forEach((sing, index)=>{\r\n                   if( sing.name === e.target.name){\r\n                       sing.value = e.target.value\r\n                   }\r\n                })\r\n            }\r\n        })\r\n        setForm(form)\r\n    }\r\n\r\n    const preSet = [\r\n        {\r\n            id: 1,\r\n            value: [\r\n                { label: \"Start\", type: \"number\", name: 'start', onChange: onChange, readOnly: true, value:0 },\r\n                { label: \"End\", type: \"number\", name: 'end', onChange: onChange , value:100},\r\n                { label: \"Grade\", type: \"text\", name: 'grade', onChange: onChange, value:\"\" },\r\n                { label: \"GPA\", type: \"text\", name: 'gpa', onChange: onChange,value:\"\" },\r\n            ]\r\n        }\r\n    ]\r\n\r\n    const [presetForm, setForm] = React.useState(preSet);\r\n\r\n    const addForm = {\r\n        id: presetForm.length + 1,\r\n        value: [\r\n            { label: \"Start\", type: \"number\", name: 'start', onChange: onChange,value:0 },\r\n            { label: \"End\", type: \"number\", name: 'end', onChange: onChange , value:0},\r\n            { label: \"Grade\", type: \"text\", name: 'grade', onChange: onChange , value:\"\"},\r\n            { label: \"GPA\", type: \"text\", name: 'gpa', onChange: onChange , value:\"\"}\r\n        ]\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const makeForm = (singleForm) => {\r\n        return singleForm.value.map((item, i) => {\r\n            return (\r\n                <TextField\r\n                    key={i}\r\n                    id={singleForm.id}\r\n                    InputProps={{\r\n                        readOnly: item.readOnly,\r\n                        inputProps: { max: 100, min: 10 }\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    {...item}\r\n                    style={{ width: \"100px\", margin: \"10px\" }}\r\n                ></TextField>\r\n            )\r\n        })\r\n    }\r\n\r\n    const addAnotherForm =()=>{\r\n        let form  = [...presetForm];\r\n        form.push(addForm)\r\n        setForm(form)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen} style={{ marginBottom: \"20px\" }}>\r\n                Create custom Grade\r\n            </Button>\r\n\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle>{\"Make custom grade\"}</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {Object.entries(presetForm).map(([key, value], i) => {\r\n                        return (<div>{makeForm(value)}</div>)\r\n                    })}\r\n\r\n                    {/* {showAddForm && makeForm(addForm)} */}\r\n\r\n                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" \r\n                        onClick={addAnotherForm}>\r\n                    <AddIcon />\r\n                    </IconButton>\r\n                </DialogContent>\r\n\r\n\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\nimport FileInput from './FIleInput';\nimport PdfGeneratorInterface from \"./PdfGeneratorInterface\";\nimport { Button, TextField, Typography } from '@material-ui/core';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CustomGradeInputForm from './CustomGradeInputForm';\n\nclass App extends Component {\n\n  state = {\n    tableHeadersArr: [],\n    tableRowsArr: [],\n    isBtnDis: true,\n    payload: {},\n    instituteName: \"\"\n  }\n\n  getData = (data) => {\n    this.setState({\n      tableHeadersArr: Object.keys(data[0]),\n      tableRowsArr: data,\n    })\n  }\n\n  gradeCalculator(data) {\n    switch (true) {\n      case (data < 33):\n        data = `0.00 | fail`\n        break;\n      case (data < 40):\n        data = `1.00 | D`\n        break;\n      case (data < 50):\n        data = `2.00 | C`\n        break;\n      case (data < 60):\n        data = `3.00 | B`\n        break;\n      case (data < 70):\n        data = `3.50 | A-`\n        break;\n      case (data < 80):\n        data = `4.00 | A`\n        break;\n      default:\n        data = `5.00 | A+`\n        break;\n    }\n    return data\n  }\n\n  calculateCGPA(item) {\n    let subArr = Object.keys(this.state.payload);\n    let cgpa = 0\n    for (let index = 0; index < subArr.length; index++) {\n      const data = subArr[index];\n      let marking = parseInt(data.replace(/[^\\d]/g, ''), 10) || 100\n      let percentMark = (item[data] * 100) / marking\n\n      if (percentMark < 33) {\n        cgpa = 0;\n        break\n      } else if (percentMark < 40)\n        cgpa += 1.00\n      else if (percentMark < 50)\n        cgpa += 2.00\n      else if (percentMark < 60)\n        cgpa += 3.00\n      else if (percentMark < 70)\n        cgpa += 3.50\n      else if (percentMark < 80)\n        cgpa += 4.00\n      else\n        cgpa += 5.00\n    }\n    return (cgpa / (subArr.length)).toFixed(2)\n  }\n\n  generatePDF = async () => {\n    let tableRowsArr = [...this.state.tableRowsArr];\n    // calculate grade\n    let subArr = Object.keys(this.state.payload);\n\n    tableRowsArr.forEach((item, index) => {\n      item.cgpa = this.calculateCGPA(item)\n      subArr.forEach((data) => {\n        let marking = parseInt(data.replace(/[^\\d]/g, ''), 10) || 100\n        let percentMark = (item[data] * 100) / marking\n        item[data] = item[data] + \" | \" + this.gradeCalculator(percentMark)\n      })\n    })\n\n    tableRowsArr.sort(function (a, b) { return b.cgpa - a.cgpa });\n\n    tableRowsArr.forEach((item, index) => {\n      item.position = index + 1\n    })\n\n    let tableHeadersArr = Object.keys(tableRowsArr[0])\n    tableHeadersArr.unshift(\"cgpa\")\n    tableHeadersArr.unshift(\"position\")\n    tableHeadersArr.splice(-2)\n    let pdfInterface = new PdfGeneratorInterface(\n      tableHeadersArr,\n      tableRowsArr,\n      \"Result\",\n      this.state.instituteName\n    );\n    pdfInterface.downloadTableAsPDF()\n\n    this.refresh()\n  };\n\n  refresh = () => {\n    this.setState({\n      tableHeadersArr: [],\n      tableRowsArr: [],\n      payload: {},\n      isBtnDis: true\n    }, () => {\n      this.fileInputRef.refresh()\n    })\n  }\n\n  handleChange = (e) => {\n    let payload = { ...this.state.payload }\n    if (e.target.checked)\n      payload[e.target.name] = e.target.checked\n    else {\n      delete payload[e.target.name]\n    }\n    this.setState({\n      payload,\n      isBtnDis: false\n    })\n  }\n\n  setName = (e) => {\n    this.setState({\n      instituteName: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"#ededed\", minHeight: \"100vh\", flexDirection: \"column\" }}>\n        <div style={{ padding: \"20px\" }}>\n          <FileInput getData={this.getData} ref={(r) => { this.fileInputRef = r }} />\n        </div>\n\n        <CustomGradeInputForm />\n\n        {this.state.tableHeadersArr.length > 0 && (\n          <div>\n            \n            <Typography variant=\"h6\" component=\"h2\">\n              Choose columns which you want for calculate grade:\n            </Typography>\n\n            < TextField\n              onChange={this.setName}\n              label={\"Enter Institute Name\"}\n              value={this.state.instituteName}\n              required variant=\"outlined\"\n              style={{ margin: \"20px 0px\" }}\n            />\n\n            <FormGroup row>\n              {this.state.tableHeadersArr.map((item, i) => {\n                return (\n                  <FormControlLabel\n                    control={<Checkbox checked={this.state.payload.item} onChange={this.handleChange} name={item} />}\n                    label={item}\n                    key={i}\n                  />\n                )\n              })}\n\n            </FormGroup>\n          </div>\n        )}\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={this.state.isBtnDis}\n          onClick={this.generatePDF}\n        >\n          Download Result\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}